udemy - Learn GIT In depth with BitBucket- Practical work flows
        by Rahul Shetty
---

in bitbucket how to create project? workspace? 

- git clone
- git config -g user.name <username>
- git add ptests/  (all file will be added)

- git commit -m "give message here"

- git push origin master
           <from where is copied> <which branch push>
           (if no repo in site push) (try other repo and branch) (create repo in local and push)

- git clean -f (clean untracked file from working directory)


- git log              HEAD->master      
                       (origin/master, origin/HEAD)

repo settings-> repo permission
                  project permission 
                  how to add user or group?

no workspace setting->new group
                        add user to group
                        user will get invitation
workspace and repo level permission need to be given

- git checkout -b f/b1        (create new branch)
- git config credential.username "ashu"    (to change name)
- git config --list

- git reset                   (from stage to working)
- git reset --soft HEAD~1
                              (from commit to stage) - (content is there)
- git reset --hard HEAD~1
                              (from commit to stage) - (content is not there) - (after git status nothing to commit no file change in staging area)

- git reflog
- git push origin  f/b1      (branch created in local and push the branch)

create pull request(go to pull req for both raiser and reviewer)
comment addressed so that reviwer get mail

- git push origin master -f
back to master -pull
add master commit to branch
then merge with master in local
in branch
          git merge master

- git checkout master
- git pull
- git checkout b1
- git merge              / git rebase
                         - git squash
                         - git rebase -i HEAD~2 

- git commit -amend      (merge file to last commit)
- git show               (to see last commit changes)

- git commit --ament -in "the new msg"      (change the last commit msg)

from one branch to other branch  - commit copy


- git checkoout b1
- git log (select the commit encryption)
- git checkout b2
- git log
- git cherry-pick
                may be merge conflict
                (see file location) go vscode refresh
                (maven referesh)
                <<<<< HEAP
                        this code is in branch
                >>>>> encyp
                        this code in chery-pick

- git status
- git add .
- git commit --cherypick encyp

- git bisect (work on binary search algo)
- git bisect start
- git bisect bad encp
- git bisect good encyp

    git bisect bad  (the moved is commit bad)
    -> bad -> this is cultprit
    -> good also show changes  (good and bad are one below another)


- git bisect reset (back to head)


created branch in site
- git fetch origin
- git checkout b_4m_main_site

go to the fault commit and create branch
- git checkout encyp
      (branch disconnect from head) - (detached head) - (if commit not should in history)
- git checkout -b fix_branch
----------------------

- git checkout feature/account
        make chage in file1 but not stagged
- get checkout feature/profile        |
        this changes shows here       |>

        which is not good
        - git status
        - git restore file1
(so always staged in feature/account then move to feature/profile) -> when you move back to feature/account the changes are gone.

- git stash 
        save work (in local also no change will be there)
- git stash pop
- git diff
- git blame f1 (every line is done by whome)


- git revert encyp 
        commit 
        revert "chnage f1"
        commit
        change f1

in branch permission:-
        can not merge your code with failed builds(checkbox)

- git fetch - copy file from remote but not merge
- git pull - copy & merge code in local
        f1 created in site b1
        in local git b1
        - git fetch        (not shown in vs code)
        - git checkout origin/b1        |
        (detached head)(now show in vs) |>

        f2 created on site in b3
        git pull origin b3

- git tag t1 (create tag)
- git tag    ( show all tag)

- git tag -a v2.april -m "release date"
             ( another way to create tag with msg)

- git push --tags
             (by default tag is attached with the last commit)
- git tag v2.0 encyp
              (to add tag in previous commit)

- git checkout v2.0
              (also can checkout code using tag also)

- git clone (has link to origin repo)
- git fork  (just copy of project no link to repo)
        

        
































































