### week 1 ###
### w1-lec 1 ###
- pwd
- ls
- ps
- uname

ctrl + l = clear screen
ctrl + d = exit

user@machine:~ ls -a

- ls -a
- ls -l
- man ls
- man 1 ls 
(command option argument)

page section copy from ppt
file system hierarchy copy from ppt

- cd ..
- cd
- cd /
- cd .

each folder contain copy ppt
in /dev
brw - block
crw - char wise

/lib
version file


### w1-lec 2 ###

cp cmd from ppt
- cd - (prev dir)
- cd .
- cd ~  (home dir)

- date
- date -R (RFC5322 standard - for email)
- man date

- cal 
- cal aug 1947
- cal 8 1947
- cal Aug 1947

- ncal
- ncal aug 1947

- free
- free -h  (human readable)

- groups (gphani sudo - super user)

cp ppt
-l details
file types cp ppt blk,char file devices
ls -i inode
permission string

- mkdir level1
- chmod g-W level1
- chmod g-X level1
u-user
g-group
0-others
- chmod o-X level1

- chmod 700 leve1

- touch file1
- cp file1 file2
- mv file2 ..

- mv file2 file3a (mv used for both move file and rename file)
- mv file1 "file one"

-chmod 700 "file one"

- rm "file one"
- man rm
- alias rm="rm -i"


- ls -li
- cd level1
- ls -lia    (same inode no)

- mkdir level2
- cd level2
- ls -lia  (inode no increase)

- whoami
(in root owner not match)
(we are other)
- cd /var/log
(many file not readable by us)
- less alternatives.log
- chmod o+w alternative.log    (permission denied no exec permission)
- less ubuntu-advantqage.log   (permission denied no read permission)
- mkdir level1  (permission denied)
- touch file1   (permission denied) 
- cd unattended-upgrades (permission denied - not able to navigate to that folde)

- cd /usr/bin
- file znew
- less znew

- file zoom  (symbolic link - ZoomLauncher)
- cd /opt/zoom
- file ZoomLauncher (ELF - binary file)
- less ZoomLauncher


- ls -l
- touch Desktop  (change timestamp)
- ls-l

- cp from ppt
  

### w1-lec 3 ###
- cd ///usr///bin

ls cmnd from ppt

- ls l level1
- ls ld level1 (not inside dir)
- ls -ldi level1

- ls level1 ldi
- ls -d level1 -li  (any form work)

- man ls
- ls -l --directory --inode

know file better ppt

- cd/etc
- ls -l profile
- less profile  (q to come out)

- cat profile (can not move back and forth - not good for big file)

- more profile (page by page)

- head profile (first 10 line)
- head -n 5 profile

- tail profile

- man wc
- wc profile
lines words size
- wc -l profile

- man which
- whatis which

- ls -l /usr/bin/less
- ls -l /usr/bin/more

- apropos who
- man who
- which appropos
- whatis who

- which appropos
- which whatis
- ls -l /usr/bin/apropos
(symbolic link to what is - o/p diffrent)

- man -k who (same o/p as appropos)

- help (show reserve kwyword for shell)

- info  (< - shift+,)

- type type (shell bulitin not by os)
- type ls
- which ls
- ls -l /usr/bin/ls  (executable)
- file /usr/bin/ls  (ELF 64-bit from os)

- type help  (bulitin)

- alias ll='ls -l'
- type ll  (alias)
- unalias ll

- alias
- unalias l

multiple argument

- touch file1 file2 file3
- mkdir mydir
- cp file1 mydir
- cp file1 file2  (ask permission)

- rmdir level1 (non empty dir can not be removed)
- rmdir -r mydir  (forcefully removed)

 - cp mydir mydir2
(mydir has two files - mydir is not created - after cmd mydor will be created with the two files of mydir)

- mv mydir mydir3 (it only rename the dir there is no dir name mydir3)

links

- touch file1
- ln -s file1 file2
(separate i node)
 - ln file1 file3
(same inode and hard link count 2 - both file1,file3 2 count)

file size
- stat znew
- du znew
- du -h znew

in-memory filesystem
/proc
/sys

- cd /
- ls -l
(they are in memmory not in hard disk)
proc - older system from kernet 2.6 \sys is used
sys -
- cd proc
(showing 0 byte)
- less cpuinfo
- cat cpuinfo
- cat version
- uname -a
- cat meminfo
- frre
- free h
- cat partition
- df
- df -h

(kcore shows huge no - theoritacally how much virtual memory it can handle)

- cd sys/bus/usb/devices/1-1
- less manufacturer
- less product

### week 5 ###
### w5-lec 1 ### https://www.youtube.com/watch?v=pPRge8Yxbso&t=4s ###

from ppt echo
ppt- frequently used
ppt - special var
ppt - process control
ppt - exit codes
ppt - flag set

bash: man: command not found
-  echo hello world            /* displat line test */
		hello world
-  echo hello                        world    /* does not take the space */
		hello world
-  echo "hello               world"          /* take space when inside double quote */
		hello               world
-  echo "hello       world'                  /* wait for same closing quote */
		> some more input
		> closing single quote'
		> closing double quote"
		
		hello       world'
		some more input
		closing single quote'
		closing double quote

/* use of echo in program */
- echo "------------------------------------------"
- echo "Comments:                  "
- echo now you enter the value of variable x

-  echo $USERNAME
		ubuntu	
-  echo $USER
		ubuntu

-  echo '$USERNAME'              /* single quote not worked */
		$USERNAME
-  echo "User logged into the shell now is : $USER"    /* can be used with other sentence */
        User logged into the shell now is : ubuntu

-  echo $PWD
		/home/ubuntu
 
- echo $HOSTNAME
       icme
- cat /etc/hostname
      icme

-  echo "hostname is $HOSTNAME and user is $USER"
		hostname is tryit and user is ubuntu

-  echo "hostname is \$HOSTNAME and user is $USER"       /* / will not intepretate as env variable */
		hostname is $HOSTNAME and user is ubuntu 

- printenv
- env
- set            /* with function displayed */

- man printenv
- printenv HOME
          /home/gphani
-  date
	  Tue Mar 11 02:28:22 UTC 2025
-  date -R                      /* email date format with , to identify */
	  Tue, 11 Mar 2025 02:28:31 +0000
-  alias date='date -R'
-  alias date                  /* alias date to see the alias format */
	alias date='date -R'
-  date
	Tue, 11 Mar 2025 02:29:06 +0000
-  which date                  /* which - where the file located */
	/usr/bin/date
-  cd /usr/bin          
-  ./date                      /* go to location and execute file will show original format */
	Tue Mar 11 02:30:15 UTC 2025
- \date                        /* \ used to ignore alias */
	Tue Mar 11 02:30:21 UTC 2025

- echo $PATH            /* show all dir where it search for file to execute */

- man ps
-  echo $0
	bash
-  ksh
-  echo $0
	ksh
-  echo $$
	683
-  ps                          /* show process this parent and child*/
    PID TTY          TIME CMD
    683 pts/1    00:00:00 bash
    710 pts/1    00:00:00 ps

-  ps --forest                /* show process this parent and child in readable format*/
    PID TTY          TIME CMD
    683 pts/1    00:00:00 bash
    711 pts/1    00:00:00  \_ ps

-  ps -f                      /* show process this parent and child with PPID*/
UID          PID    PPID  C STIME TTY          TIME CMD
ubuntu       683     682  0 02:27 pts/1    00:00:00 bash -i
ubuntu       714     683  0 02:40 pts/1    00:00:00 ps -f

-  ps -e                     /* show all process */     
    702 ?        00:00:00 kworker/0:1-virtio_vsock
    713 ?        00:00:00 kworker/u192:0-events_unbound
    715 pts/1    00:00:00 ps

-  ps -ef                   /* show all process with PPID*/  

### w5-lec 2 ### https://www.youtube.com/watch?v=QX5XElFRpck ###
ppt - creation, inspection, modification, list...
ppt - create a variable
ppt - exporting a variable
ppt - using variable values
ppt - remove var
ppt - test if var available
ppt - not set
ppt - default value
ppt -  reset value
ppt - list var
ppt - length
ppt - slice
ppt - remove matching pattern
ppt - keep matching
ppt - replace pattern
ppt - replace at start or end
ppt - convert character
ppt - resrticting var
ppt - remove restrictions
ppt - index array
ppt - associative array

- myvar=10
- echo $myvar
       10
- 10myvar=11		/* car cannot start with number start with _ */
	error
- Myvar=11
- echo $Myvar		/* var is case sensitive */
	11
- _var=13
- echo $_var
	13

-  myvar=hello world
		bash: world: command not found
-  echo $?
		127
		
-  myvar="hello world"
-  echo $myvar
		hello world
-  unset myvar
-  echo $myvar

-  true
-  echo $?
	0
-  false
-  echo $?
	1
	
-  [[ -v myvar ]];
-  echo $?
	0
-  unset myvar
-  [[ -v myvar ]];
-  echo $?
	1
 -  echo $myvar			/* myvar does not exits */

-  [[ -z ${myvar+x} ]]		/* check for var */
-  echo $?			/* return 0 if not exists */
	0
-  myvar=10			/* declare var */
-  [[ -z ${myvar+x} ]]
-  echo $?			/* return 1 if exists */
	1
-  myvar=FileName
-  echo $myvar
		FileName
-  echo "$myvar.txt"
		FileName.txt
-  echo "$myvar_.txt"		/* can not identify $myvar_ as variable */	
-  echo "${myvar}_.txt"		/* therefore use {} */
		FileName_.txt

-  myvar=3.14
-  echo $myvar
	3.14
-  bash				/* create child bash */
-  ps --forest
    PID TTY          TIME CMD
    691 pts/1    00:00:00 bash
    705 pts/1    00:00:00  \_ bash
    711 pts/1    00:00:00      \_ ps
-  echo $myvar			/* the var not available in child process */

-  exit
	exit
-  ps --forest
    PID TTY          TIME CMD
    691 pts/1    00:00:00 bash
    712 pts/1    00:00:00  \_ ps
-  echo $myvar
	3.14
-  export myvar=3.14		/* export the var in child process */
-  bash
-  ps --forest
    PID TTY          TIME CMD
    691 pts/1    00:00:00 bash
    714 pts/1    00:00:00  \_ bash
    720 pts/1    00:00:00      \_ ps
-  echo $myvar
	3.14
-  myvar=4.56			/* change export the var available in child process */
-  echo $myvar
	4.56
-  exit
	exit
-  echo $myvar			/* but the var available is not changed in parent process */
	3.14

/* --- export from child process also not change the variable --- */ 

-  export myvar=3.14
-  echo $myvar
	3.14
-  bash
-  ps --forest
    PID TTY          TIME CMD
    691 pts/1    00:00:00 bash
    722 pts/1    00:00:00  \_ bash
    728 pts/1    00:00:00      \_ ps
-  echo $myvar
	3.14
-  export myvar=4.56		/* export from child process */
-  echo $myvar			/* in child process it is change */
	4.56
-  exit
exit
-  ps --forest
    PID TTY          TIME CMD
    691 pts/1    00:00:00 bash
    729 pts/1    00:00:00  \_ ps
-  echo $myvar			/* in parent process it is not changed */	
	3.14
-  mydate=`date`		/* back quote to store date command resuld */
-  echo $mydate
	Wed Mar 12 04:06:39 UTC 2025	/* it is not dynamic */
-  date
	Wed Mar 12 04:06:48 UTC 2025 

-  unset myvar
-  echo $myvar

-  echo ${myvar:-hello}			/* if not present show hello */	
	hello
-  echo ${myvar:-"my var is not set"}	/* if not present show string */	
	my var is not set
-  echo $myvar

-  echo ${myvar:=hello}			/* if not present set the var */	
	hello
-  echo $myvar
	hello
-  echo ${myvar:=HELLO}			/* if already present not set the var */
	hello
-  echo $myvar
	hello
-  unset myvar
-  echo ${myvar:?"my var is not set"}	/* if not present show string but more relatable way */
	bash: myvar: my var is not set
-  myvar=hello
-  echo $myvar
	hello
-  echo ${myvar:+ZZZ}			/* if present set to ZZZ */
	ZZZ
-  echo $myvar				/* NEED TO CHECK LATER */
	ZZZ
-  unset myvar
-  echo $myvar

-  echo ${myvar:-YYY}			/* if not present set to ZZZ */
	YYY
-  echo $myvar  
	YYY


### w5-lec 3 ### https://www.youtube.com/watch?v=R9vnc8AdVUo&t=1s ###
 
/* all varibles show */
- printenv
- env
- echo ${!HI*}         /* all varibles that start with Hi */
       HISTCMD HISTCONTROL HISTFILE HISTFILESIZE HISTSIZE

- mydate=`date`       /* store mydate in mydate variable */
- echo $mydate
        Fri Mar 7 03:31:46 UTC 2025
- echo ${#mydate}    /* # - count no of character in myvar */
        28
- echo $(myvar)      /* if variable is not defines then return 0 */
        0
- myvar=abcdefgh12345678  
- echo ${myvar:3;4}      /* skip first 3 char then 4 char */
        defg
- echo ${myvar:-3:4}      /* from right 3 char from ther 4 char */
        678
- echo ${myvar:-3:2}
      67
- echo ${mydate:0:6}
      Sunday

- date +"%d %B %Y"
      09 January 2022
- echo ${mydate:6:10}
      09 January 2022

- myvar=MyFileName.SomethingElse.jpeg
- echo ${myvar#*.}
     SomethingElse.jpeg 
- echo ${myvar##*.}  
      .jpeg
- echo ${myvar%.*}
      MyFileName.SomethingElse
- echo ${myvar%%.*}
      MyFileName
- echo ${myvar%%.*}.${myvar##*.} 
      MyFileName.jpeg

/* Replace character */
myvar=MyFileName.SomethingElse.jpeg

-  echo $myvar
MyFileName.SomethingElse.jpeg       
-  echo ${myvar/e/E}                  /* change first occurence of e */  
MyFilEName.SomethingElse.jpeg
-  echo ${myvar//e/E}                /* change all occurence of e */
MyFilENamE.SomEthingElsE.jpEg
-  echo ${myvar/#M/m}                /* change if first letter is M */
myFileName.SomethingElse.jpeg
-  echo ${myvar/%g/G}                /* change if last letter is g */
MyFileName.SomethingElse.jpeG
-  echo ${myvar/%jpeg/jpg}
MyFileName.SomethingElse.jpg

- myvar=MyjpegFile.Something.jpeg
- myvar1= 'echo${myvar//jpeg/jpg}`
- echo $myvar1
        MyjpgFile.Something.jpg

-  mydate=`date`
-  echo $mydate
        Sun Mar 9 12:17:29 UTC 2025
-  echo ${mydate,}                   /* , first char change to small */
        sun Mar 9 12:17:29 UTC 2025
-  echo ${mydate,,}                  /* ,, all char change to small */
        sun mar 9 12:17:29 utc 2025
-  myvar=hello                       
-  echo ${myvar^}                    /* ^ first char change to capital */ 
        Hello
-  echo ${myvar^^}                  /* ^^ first char change to capital */ 
        HELLO

-  declare -i mynum                /* only store integers */ 
-  mynum=10
-  echo ${mynum}
        10
-  mynum=hello
-  echo ${mynum}                  /* if assign to other it will store 0 */ 
        0
-  declare -l myvar              /* only store lower case */
-  myvar=hello
-  echo ${myvar}
        hello
-  myvar=ZZDF
-  echo ${myvar}                /* if uppercase stored then it turns into lower case */
      zzdf
-  declare -u MYVAR            /* only store upper case */
-  MYVAR=helllo
-  echo ${myvar}
        zzdf
-  echo ${MYVAR}              
        HELLLO
-  MYVAR=77
-  echo ${MYVAR}
        77
-  MYVAR=77ui                  /* it can store also intiger apart from small case letter */
-  echo ${MYVAR}
        77UI

- declare +u MYVAR            /* remove upper case condition */
- MYVAR="hello, world"
- echo ${MYVAR}
       hello, world

-  today=`date`
-  echo ${today}
        Sun Mar 9 13:23:29 UTC 2025
-  declare -r today                    /* var will be read only */
-  today="hello world"
          bash: today: readonly variable
-  declare +r today                    /* + also can not chage read only var */
          bash: declare: today: readonly variable

-  declare -a arr                    /* declare an array */
-  arr[0]=Sunday
-  arr[1]=Monday
-  echo ${arr[1]}
          Monday
-  arr[100]=LeapYearDay             /* any type of index can be created */
-  echo ${#arr[@]}                  /* shows no of array elements */
        3
-  echo ${!arr[@]}                  /* shows all the indexes */
        0 1 100
-  unset 'arr[100]'                /* remove an array element */
-  echo ${#arr[@]}
        2
-  echo ${!arr[@]}
        0 1
- myfiles=`ls`
- echo ${#myfiles[@]} 
       11
- echo ${myfiles[1]}
       Desktop





















